package sb.blpapi.simple;

import java.text.SimpleDateFormat;
import java.util.*;

public class BlpRequest {

    private boolean historicalRequest;
    private java.util.Date historicalDate;
    
    private List<String> fields = new ArrayList<String>();
    private List<BlpSecurity> securities = new ArrayList<BlpSecurity>();
    private Map<String, String> overrideFields = new HashMap<String, String>(); 

    // Unlikely to have multiple threads accessing the same BlpRequest instance
    private SimpleDateFormat sdf = new SimpleDateFormat(BlpRequestConstants.DATE_FORMAT_YYYYMMDD);
    
    public boolean isHistoricalRequest() {
        return historicalRequest;
    }

    public void setHistoricalRequest(boolean historical) {
        this.historicalRequest = historical;
    }

    public java.util.Date getHistoricalDate () {
        return historicalDate;
    }

    public void setHistoricalDate(java.util.Date historicalDate) {
        this.historicalDate = historicalDate;
    }
    
    public boolean containsField (String field) {
        return fields.contains(field);
    }

    public void addField (String field) {
    	if (!containsField(field))
    		fields.add(field);
    }

    public void addFields (List<String> fields) {
        for (String field : fields) {
            addField(field);
        }
    }

    public void removeField(String field) {
        fields.remove(field);
    }

    public List<String> getFields() {
        return Collections.unmodifiableList(fields);
    }

    public String getFieldAt(int i) {
        return fields.get(i);
    }

    public void addSecurity (BlpSecurity security) {
    	if (security!=null && security.getSecuritySearch()!=null)
    		securities.add(security);
    	else
    		throw new IllegalArgumentException("Security Search is not valid.");
    }

    public boolean containsSecurity (BlpSecurity security) {
        return securities.contains(security);
    }

    public void removeSecurity (BlpSecurity security) {
        securities.remove(security);
    }

    // Get unmodifiable security list to avoid external manipulation of List
    public Collection<BlpSecurity> getSecurities () {
        return Collections.unmodifiableList(securities);
    }

    public BlpSecurity getSecurityAt (int i) {
        return securities.get(i);
    }

    public String[] getSecurityStrings() {
        List<String> securityStringList = new ArrayList<String>();
        for (BlpSecurity security : securities) {
        	securityStringList.add(security.getSecuritySearch());
        }
        String[] result = securityStringList.toArray(new String[0]);
        return result;
    }
    public List<String> getSearchStrings() {
        List<String> securityStringList = new ArrayList<String>();
        for (BlpSecurity security : securities) {
        	securityStringList.add(security.getSecuritySearch());
        }
        return Collections.unmodifiableList(securityStringList);
    }

    public void addOverrideField(String field, Object value) {
    	if (field!=null) {
    		overrideFields.put(field, convertToBlpFormat(value));
    	}
    }
    public boolean containsOverrideField(String field) {
        return overrideFields.containsKey(field);
    }
    public void removeOverrideField (String field) {
        overrideFields.remove(field);
    }
    public Map<String, String> getOverrideFields() {
        return Collections.unmodifiableMap(overrideFields);
    }

    private String convertToBlpFormat(Object o) {
    	if (o==null) {
    		return null;
    	} else if (o instanceof Date) {
            return sdf.format((Date) o);
        } else {
        	return o.toString();
        }
    }    
    
    public String toString () {
        StringBuffer buf = new StringBuffer();
        buf.append("Securities=" + securities + "\n");
        buf.append("Fields=" + fields + "\n");
        buf.append("Override Fields=" + overrideFields + "\n");
        return buf.toString();
    }
    
    @Override
    // Generated by Eclipse
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((fields == null) ? 0 : fields.hashCode());
		result = prime * result + ((historicalDate == null) ? 0 : historicalDate.hashCode());
		result = prime * result + (historicalRequest ? 1231 : 1237);
		result = prime * result + ((overrideFields == null) ? 0 : overrideFields.hashCode());
		result = prime * result + ((securities == null) ? 0 : securities.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
//    	boolean result = true;
//        if (obj == this) {
//            result = true;
//        } else if (obj == null || !(obj instanceof BlpRequest)) {
//        	result = false;
//        } else {
//            BlpRequest other = (BlpRequest) obj;
//            if (this.historicalRequest!=other.historicalRequest
//            		|| !this.fields.equals(other.fields)
//            		|| !this.securities.equals(other.securities)
//            		|| !this.overrideFields.equals(other.overrideFields)) {
//            	result = false;
//            }
//        }
//        return result;
        // Generated by Eclipse - BEGIN
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		BlpRequest other = (BlpRequest) obj;
		if (fields == null) {
			if (other.fields != null)
				return false;
		} else if (!fields.equals(other.fields))
			return false;
		if (historicalDate == null) {
			if (other.historicalDate != null)
				return false;
		} else if (!historicalDate.equals(other.historicalDate))
			return false;
		if (historicalRequest != other.historicalRequest)
			return false;
		if (overrideFields == null) {
			if (other.overrideFields != null)
				return false;
		} else if (!overrideFields.equals(other.overrideFields))
			return false;
		if (securities == null) {
			if (other.securities != null)
				return false;
		} else if (!securities.equals(other.securities))
			return false;		
		return true;
		// Generated by Eclipse - BEGIN
	}

//    Not allow external manipulation of List
//    public void setSecurities (List<BBSecuritySearch> securities) {
//        this.securities = securities;
//    }
//
//    public void setFields (List<String> fields) {
//        this.fields = fields;
//    }
}
